kind: Namespace
apiVersion: v1
metadata:
  name: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
  annotations:
    image: <%= @options[:image] %>

---
apiVersion: v1
kind: Secret
metadata:
  name: regcred
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
data:
  .dockerconfigjson: <%= @options[:dockerconfigjson] %>
type: kubernetes.io/dockerconfigjson

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
data:
  <%- @options[:secrets].each do |key, value| -%>
  <%= key %>: <%= Base64.strict_encode64 value %>
  <%- end -%>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: env
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
data:
  <%- @options[:env].each do |key, value| -%>
  <%= key %>: <%= value.to_json %>
  <%- end -%>

<%- if @options[:migrate] -%>
---
apiVersion: batch/v1
kind: Job
metadata:
  name: migrate-<%= @options[:instance] %>
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: <%= @options[:app] %>
        app.kubernetes.io/instance: <%= @options[:instance] %>
        app.kubernetes.io/version: <%= @options[:release] %>
        app.kubernetes.io/managed-by: cuber
    spec:
      containers:
      - name: migration
        image: <%= @options[:image] %>:<%= @options[:release] %>
        imagePullPolicy: Always
        command: <%= @options[:migrate][:cmd].shellsplit %>
        envFrom:
        - configMapRef:
            name: env
        - secretRef:
            name: app-secrets
      imagePullSecrets:
      - name: regcred
      restartPolicy: Never
<%- end -%>

<%- @options[:procs].each do |procname, proc| -%>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: <%= procname %>
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
spec:
  revisionHistoryLimit: 0
  replicas: <%= proc[:scale] %>
  selector:
    matchLabels:
      app: <%= procname %>-proc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: <%= @options[:app] %>
        app.kubernetes.io/instance: <%= @options[:instance] %>
        app.kubernetes.io/version: <%= @options[:release] %>
        app.kubernetes.io/managed-by: cuber
        app: <%= procname %>-proc
    spec:
      containers:
      - name: <%= procname %>-proc
        image: <%= @options[:image] %>:<%= @options[:release] %>
        imagePullPolicy: Always
        command: <%= proc[:cmd].shellsplit %>
        ports:
        - containerPort: 3000
        envFrom:
        - configMapRef:
            name: env
        - secretRef:
            name: app-secrets
        <%- if procname.to_s == 'web' -%>
        readinessProbe:
          httpGet:
            path: /
            port: 3000
        <%- end -%>
      <%- if @options[:migrate] && @options[:migrate][:check] -%>
      initContainers:
      - name: migration-check
        image: <%= @options[:image] %>:<%= @options[:release] %>
        imagePullPolicy: Always
        command: <%= @options[:migrate][:check].shellsplit %>
        envFrom:
        - configMapRef:
            name: env
        - secretRef:
            name: app-secrets
      <%- end -%>
      imagePullSecrets:
      - name: regcred
<%- end -%>

<%- @options[:cron].each do |jobname, cron| -%>
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cron-<%= jobname %>
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
spec:
  schedule: <%= cron[:schedule].to_json %>
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: task
            image: <%= @options[:image] %>:<%= @options[:release] %>
            imagePullPolicy: Always
            command: <%= cron[:cmd].shellsplit %>
            envFrom:
            - configMapRef:
                name: env
            - secretRef:
                name: app-secrets
          imagePullSecrets:
          - name: regcred
          restartPolicy: Never
<%- end -%>

---
apiVersion: v1
kind: Service
metadata:
  name: load-balancer
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
spec:
  type: LoadBalancer
  selector:
    app: web-proc
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 3000
