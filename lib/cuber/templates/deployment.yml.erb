kind: Namespace
apiVersion: v1
metadata:
  name: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
  annotations:
    image: <%= @options[:image] %>
    buildpacks: <%= @options[:buildpacks] %>
    ingress: <%= 'enabled' if @options[:ingress] %>

---
apiVersion: v1
kind: Secret
metadata:
  name: regcred
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
data:
  .dockerconfigjson: <%= @options[:dockerconfigjson] %>
type: kubernetes.io/dockerconfigjson

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
data:
  <%- @options[:secrets].each do |key, value| -%>
  <%= key %>: <%= Base64.strict_encode64 value %>
  <%- end -%>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: env
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
data:
  <%- @options[:env].each do |key, value| -%>
  <%= key %>: <%= value.to_json %>
  <%- end -%>

<%- if @options[:migrate] -%>
---
apiVersion: batch/v1
kind: Job
metadata:
  name: migrate-<%= @options[:instance] %>
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: <%= @options[:app] %>
        app.kubernetes.io/instance: <%= @options[:instance] %>
        app.kubernetes.io/version: <%= @options[:release] %>
        app.kubernetes.io/managed-by: cuber
    spec:
      containers:
      - name: migration
        image: <%= @options[:image] %>:<%= @options[:release] %>
        imagePullPolicy: Always
        <%- if @options[:buildpacks] -%>
        command: ["launcher"]
        args: <%= @options[:migrate][:cmd].shellsplit %>
        <%- else -%>
        command: <%= @options[:migrate][:cmd].shellsplit %>
        <%- end -%>
        envFrom:
        - configMapRef:
            name: env
        - secretRef:
            name: app-secrets
      imagePullSecrets:
      - name: regcred
      restartPolicy: Never
<%- end -%>

<%- @options[:procs].each do |procname, proc| -%>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: <%= procname %>
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
spec:
  revisionHistoryLimit: 0
  replicas: <%= proc[:scale] %>
  selector:
    matchLabels:
      app: <%= procname %>-proc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: <%= @options[:app] %>
        app.kubernetes.io/instance: <%= @options[:instance] %>
        app.kubernetes.io/version: <%= @options[:release] %>
        app.kubernetes.io/managed-by: cuber
        app: <%= procname %>-proc
    spec:
      containers:
      - name: <%= procname %>-proc
        image: <%= @options[:image] %>:<%= @options[:release] %>
        imagePullPolicy: Always
        <%- if @options[:buildpacks] -%>
        command: ["launcher"]
        args: <%= proc[:cmd].shellsplit %>
        <%- else -%>
        command: <%= proc[:cmd].shellsplit %>
        <%- end -%>
        envFrom:
        - configMapRef:
            name: env
        - secretRef:
            name: app-secrets
        <%- if procname.to_s == 'web' -%>
        env:
        - name: PORT
          value: "80"
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /
            port: 80
        <%- end -%>
      <%- if @options[:migrate] && @options[:migrate][:check] -%>
      initContainers:
      - name: migration-check
        image: <%= @options[:image] %>:<%= @options[:release] %>
        imagePullPolicy: Always
        <%- if @options[:buildpacks] -%>
        command: ["launcher"]
        args: <%= @options[:migrate][:check].shellsplit %>
        <%- else -%>
        command: <%= @options[:migrate][:check].shellsplit %>
        <%- end -%>
        envFrom:
        - configMapRef:
            name: env
        - secretRef:
            name: app-secrets
      <%- end -%>
      imagePullSecrets:
      - name: regcred
<%- end -%>

<%- @options[:cron].each do |jobname, cron| -%>
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cron-<%= jobname %>
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
spec:
  schedule: <%= cron[:schedule].to_json %>
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/name: <%= @options[:app] %>
        app.kubernetes.io/instance: <%= @options[:instance] %>
        app.kubernetes.io/version: <%= @options[:release] %>
        app.kubernetes.io/managed-by: cuber
    spec:
      backoffLimit: 0
      template:
        metadata:
          labels:
            app.kubernetes.io/name: <%= @options[:app] %>
            app.kubernetes.io/instance: <%= @options[:instance] %>
            app.kubernetes.io/version: <%= @options[:release] %>
            app.kubernetes.io/managed-by: cuber
        spec:
          containers:
          - name: task
            image: <%= @options[:image] %>:<%= @options[:release] %>
            imagePullPolicy: Always
            <%- if @options[:buildpacks] -%>
            command: ["launcher"]
            args: <%= cron[:cmd].shellsplit %>
            <%- else -%>
            command: <%= cron[:cmd].shellsplit %>
            <%- end -%>
            envFrom:
            - configMapRef:
                name: env
            - secretRef:
                name: app-secrets
          imagePullSecrets:
          - name: regcred
          restartPolicy: Never
<%- end -%>

<%- if @options[:ssl] -%>
---
apiVersion: v1
kind: Secret
metadata:
  name: ssl
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
data:
  tls.crt: <%= Base64.strict_encode64 File.read @options[:ssl][:crt] %>
  tls.key: <%= Base64.strict_encode64 File.read @options[:ssl][:key] %>
type: kubernetes.io/tls
<%- end -%>

<%- if @options[:ingress] -%>
---
apiVersion: v1
kind: Service
metadata:
  name: web-service
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
spec:
  selector:
    app: web-proc
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-ingress
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
  annotations:
    <%- @options[:lb].each do |key, value| -%>
    <%= key %>: <%= value.to_json %>
    <%- end -%>
spec:
  <%- if @options[:ssl] -%>
  tls:
  - secretName: ssl
  <%- end -%>
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web-service
            port:
              number: 80
<%- else -%>
---
apiVersion: v1
kind: Service
metadata:
  name: load-balancer
  namespace: <%= @options[:app] %>
  labels:
    app.kubernetes.io/name: <%= @options[:app] %>
    app.kubernetes.io/instance: <%= @options[:instance] %>
    app.kubernetes.io/version: <%= @options[:release] %>
    app.kubernetes.io/managed-by: cuber
  annotations:
    <%- @options[:lb].each do |key, value| -%>
    <%= key %>: <%= value.to_json %>
    <%- end -%>
spec:
  type: LoadBalancer
  selector:
    app: web-proc
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
  - name: https
    protocol: TCP
    port: 443
    targetPort: 80
<%- end -%>
